rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if user has admin role
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'super_admin'];
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
      // Combined admin check (uses only role-based authentication)
    function hasAdminAccess() {
      return isAdmin();
    }
    
    // Check if a user has purchased a course using a simplified approach
    function hasUserPaid() {
      return request.auth != null;
    }
      // Allow admins to list/read all users (collection query)
    match /users {
      allow list: if hasAdminAccess();
    }
      // Allow admins to list/read all users
    match /users/{userId} {
      // Users can read and write their own data, admins can read all user data
      allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
      allow write: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
      
      match /progress/{progressId} {
        // Users can only read and write their own progress, admins can read all progress
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow write: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
      }
      
      // Adding profile settings access
      match /profile/{document=**} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow write: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
      }
        // Adding user activity tracking
      match /activity/{activityId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if false; // Activities should be immutable once created
      }
      
      // Adding bookmarks collection
      match /bookmarks/{bookmarkId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow write: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
        // Adding wishlist collection
      match /wishlist/{wishlistItemId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow write: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Adding achievements collection
      match /achievements/{achievementId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow write: if request.auth != null && (request.auth.uid == userId || hasAdminAccess());
        allow delete: if request.auth != null && hasAdminAccess();
      }
    }
    
    // If you need to allow admin to access all users including subcollections
    match /{path=**}/users/{userId} {
      allow read: if hasAdminAccess();
    }
    
    match /courses/{courseId} {
      allow read: if true;
      allow write: if hasAdminAccess();
      
      match /lessons/{lessonId} {
        // Public access for lesson metadata
        allow read: if true;
        // Allow authenticated users to create, update, and delete lessons (for admin users)
        allow create, update, delete: if request.auth != null;
        
        // Quiz questions subcollection
        match /quizQuestions/{questionId} {
          allow read: if true;
          allow create, update, delete: if request.auth != null;
        }
      }
      
      // Course modules
      match /modules/{moduleId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null;
      }
      
      match /reviews/{reviewId} {
        allow read: if true;
        allow write: if request.auth != null;
      }
    }
    
    // Questions collection for lesson Q&A
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || hasAdminAccess() || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['answers', 'likes', 'likedBy', 'isResolved'])));
      allow delete: if request.auth != null && (request.auth.uid == resource.data.userId || hasAdminAccess());
    }
    
    // Adding admin collection for admin-only data
    match /admin/{document=**} {
      allow read, write: if hasAdminAccess();
    }
    
    // Adding analytics collection
    match /analytics/{document=**} {
      allow read: if hasAdminAccess();
      allow create: if request.auth != null; // Logged-in users can create analytics entries
      allow update, delete: if hasAdminAccess();
    }
    
    // Audit logs collection - server-side only (Firebase Admin SDK bypasses these rules)
    match /audit_logs/{logId} {
      allow read: if hasAdminAccess(); // Only admins can read audit logs
      allow write: if false; // Client writes not allowed, only server-side via Admin SDK
    }
    
    match /customers/{uid} {
      // Allow admins to read/write any customer data for course assignments
      allow read: if request.auth != null && (request.auth.uid == uid || hasAdminAccess());
      allow write: if hasAdminAccess();

      match /checkout_sessions/{id} {
        allow read, write: if request.auth != null && (request.auth.uid == uid || hasAdminAccess());
      }
      
      match /subscriptions/{id} {
        allow read: if request.auth != null && (request.auth.uid == uid || hasAdminAccess());
      }
      
      match /payments/{id} {
        allow read: if request.auth != null && (request.auth.uid == uid || hasAdminAccess());
        // Allow admins to create payments for users (for course assignment functionality)
        allow create: if hasAdminAccess();
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
    
    // Allow collection group query access for admins
    match /{path=**}/payments/{paymentId} {
      allow read: if hasAdminAccess();
    }
    
    // Add collection group rules for payments
    match /{path=**}/payments/{payment} {
      allow read: if hasAdminAccess();
    }
  }
}
